package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"

	"github.com/go-gad/dekit/looker"
)

type generator struct {
	buf bytes.Buffer
}

func (g *generator) Generate(pkg *looker.Package) error {
	g.p("// Code generated by dekit. DO NOT EDIT.")
	g.p("package %v", pkg.Name())

	g.GenerateImportPaths(nil)

	for _, prm := range pkg.Parameters {
		g.p("func decode%s(r *http.Request) (*%s, error) {", prm.UserType, prm.UserType)
		g.p("var msg %s", prm.UserType)
		for _, field := range prm.Fields {
			if field.TagName == looker.TagQuery {
				g.GenerateQuery(field)
			}
		}
		g.p("return &msg, nil")
		g.p("}")
	}

	return nil
}

func (g *generator) GenerateImportPaths(paths []string) {
	g.p("import (")
	g.p("%q", "net/http")
	for _, p := range paths {
		g.p("%q", p)
	}
	//g.p("%q", "github.com/pkg/errors")
	g.p(")")
}

func (g *generator) GenerateQuery(f looker.Field) {
	// req.Name = r.URL.Query().Get("name")
	g.p("msg.%s = r.URL.Query().Get(%q)", f.Name, f.TagValue)
}

// Output returns the generator's output, formatted in the standard Go style.
func (g *generator) Output() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format generated source code: %s\n%s", err, g.buf.String())
	}
	return src
}

func (g *generator) p(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format+"\n", args...)
}

func (g *generator) br() {
	g.p("")
}
